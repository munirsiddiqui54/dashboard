reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
df2 <- df %>%
select(
id,                     # Product ID
reviews.rating,          # User ratings
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
df2 <- df %>%
select(
id,                     # Product ID
reviews.rating,          # User ratings
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
library(dplyr)
# Install jsonlite package if not already installed
install.packages("jsonlite")
install.packages("jsonlite")
json_data <- toJSON(df2, pretty = TRUE)
write(json_data, file = "data.json")
# Subset the first 100 products
df2_subset <- df2 %>% slice(1:100)
# Convert the subset dataframe to JSON
json_data <- toJSON(df2_subset, pretty = TRUE)
# Output the JSON data
cat(json_data)
# Write the JSON data to a file
write(json_data, file = "data.json")
df2 <- df %>%
select(
id,                     # Product ID
reviews.rating,          # User ratings
asin,                   # ASIN (Amazon Standard Identification Number)
name,
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
library(dplyr)
# Load the jsonlite library
library(jsonlite)
# Subset the first 100 products
df2_subset <- df2 %>% slice(1:100)
# Convert the subset dataframe to JSON
json_data <- toJSON(df2_subset, pretty = TRUE)
# Output the JSON data
cat(json_data)
# Write the JSON data to a file
write(json_data, file = "data.json")
df2 <- df %>%
select(
id,                     # Product ID
reviews.rating,          # User ratings
asin,                   # ASIN (Amazon Standard Identification Number)
name,
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
df2 <- df %>%
select(
id,                     # Product ID
reviews.rating,          # User ratings
asins,                   # ASIN (Amazon Standard Identification Number)
name,
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
library(dplyr)
# Load the jsonlite library
library(jsonlite)
# Subset the first 100 products
df2_subset <- df2 %>% slice(1:100)
# Convert the subset dataframe to JSON
json_data <- toJSON(df2_subset, pretty = TRUE)
# Output the JSON data
cat(json_data)
# Write the JSON data to a file
write(json_data, file = "data.json")
View(df2)
# Load necessary libraries
library(dplyr)
library(jsonlite)
# Read the CSV file
df <- read.csv("7817_1.csv")
# Select relevant columns including asin, name, and review text
df2 <- df %>%
select(
id,                     # Product ID
asin,                   # ASIN (Amazon Standard Identification Number)
name,                   # Product name
reviews.rating,         # User ratings
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
review.text,            # Review text
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
# Select relevant columns including asin, name, and review text
df2 <- df %>%
select(
id,                     # Product ID
asins,                   # ASIN (Amazon Standard Identification Number)
name,                   # Product name
reviews.rating,         # User ratings
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
review.text,            # Review text
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
# Select relevant columns including asin, name, and review text
df2 <- df %>%
select(
id,                     # Product ID
asins,                   # ASIN (Amazon Standard Identification Number)
name,                   # Product name
reviews.rating,         # User ratings
reviews.doRecommend,     # Do users recommend the product
reviews.numHelpful,      # Number of helpful votes
reviews.text,            # Review text
prices,                  # Product prices
categories,              # Product categories
brand,                   # Brand of the product
colors                   # Color of the product
)
# Group by product ID and aggregate review texts
df_grouped <- df2 %>%
group_by(id, asin, name, reviews.rating, reviews.doRecommend, reviews.numHelpful, prices, categories, brand, colors) %>%
summarize(
all_reviews = paste(review.text, collapse = " | "),  # Combine all review texts into one string
.groups = 'drop'  # To avoid grouping issues after summarization
)
# Group by product ID and aggregate review texts
df_grouped <- df2 %>%
group_by(id, asins, name, reviews.rating, reviews.doRecommend, reviews.numHelpful, prices, categories, brand, colors) %>%
summarize(
all_reviews = paste(reviews.text, collapse = " | "),  # Combine all review texts into one string
.groups = 'drop'  # To avoid grouping issues after summarization
)
# Subset the first 100 products
df_grouped_subset <- df_grouped %>% slice(1:100)
# Convert the grouped dataframe to JSON
json_data <- toJSON(df_grouped_subset, pretty = TRUE)
# Output the JSON data
cat(json_data)
# Write the JSON data to a file
write(json_data, file = "data.json")
# Group by product ID and aggregate review texts
df_grouped <- df2 %>%
group_by(id, asins, name, reviews.rating, reviews.doRecommend, reviews.numHelpful, prices, categories, brand, colors) %>%
summarize(
all_reviews = paste(reviews.text, collapse = " | "),  # Combine all review texts into one string
.groups = 'drop'  # To avoid grouping issues after summarization
)
# Subset the first 100 products
df_grouped_subset <- df_grouped %>% slice(1:100)
# Convert the grouped dataframe to JSON
json_data <- toJSON(df_grouped_subset, pretty = TRUE)
# Output the JSON data
cat(json_data)
# Write the JSON data to a file
write(json_data, file = "data.json")
# Install jsonlite package if not already installed
install.packages("jsonlite")
df<- read.csv("7817_1.csv")
View(df)
View(df)
summary(df)
# Read the CSV file
df <- read.csv("7817_1.csv")
# Install necessary packages
install.packages("recommenderlab")
install.packages("Matrix")
ratings_matrix <- sparseMatrix(
i = as.numeric(factor(df$reviews.username)),
j = as.numeric(factor(df$id)),
x = as.numeric(df$reviews.rating)
)
# Load libraries
library(recommenderlab)
library(Matrix)
# Load libraries
library(recommenderlab)
ratings_matrix <- sparseMatrix(
i = as.numeric(factor(df$reviews.username)),
j = as.numeric(factor(df$id)),
x = as.numeric(df$reviews.rating)
)
# Convert to realRatingMatrix object (specific format for recommenderlab)
ratings_matrix <- new("realRatingMatrix", data = ratings_matrix)
# View some of the data
image(ratings_matrix, main = "User-Item Rating Matrix")
# Get some summary statistics
summary(ratings_matrix)
ratings_matrix <- sparseMatrix(
i = as.numeric(factor(df$reviews.username)),
j = as.numeric(factor(df$id)),
x = as.numeric(df$reviews.rating)
)
# Convert to realRatingMatrix object (specific format for recommenderlab)
ratings_matrix <- new("realRatingMatrix", data = ratings_matrix)
# View some of the data
image(ratings_matrix, main = "User-Item Rating Matrix")
# Create a user-based collaborative filtering model
user_based_rec <- Recommender(ratings_matrix, method = "UBCF")
# Get model details
model_details <- getModel(user_based_rec)
print(model_details)
# Create an item-based collaborative filtering model
item_based_rec <- Recommender(ratings_matrix, method = "IBCF")
# Get model details
model_details <- getModel(item_based_rec)
print(model_details)
# Predict top 5 recommendations for the first user
user_recommendations <- predict(user_based_rec, ratings_matrix[1], n = 5)
as(user_recommendations, "list")
View(user_recommendations)
user_recommendations <- predict(user_based_rec, ratings_matrix[1], n = 5)
as(user_recommendations, "list")
View(user_recommendations)
View(user_recommendations)
# Check sparsity of the rating matrix
rating_sparsity <- sum(!is.na(as(ratings_matrix, "matrix"))) / prod(dim(ratings_matrix))
print(paste("Sparsity:", round(rating_sparsity * 100, 2), "%"))
# Install necessary packages
install.packages("tidyverse")   # For data manipulation
install.packages("tidytext")    # For text mining
install.packages("textdata")     # For sentiment lexicons
library(tidyverse)
library(tidytext)
# Read the CSV file
df <- read.csv("7817_1.csv")
# Perform sentiment analysis
sentiment_scores <- df %>%
unnest_tokens(word, reviews.text) %>%
inner_join(get_sentiments("bing")) %>% # Using Bing sentiment lexicon
count(id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment_score = positive - negative) # Calculate sentiment score
# Merge sentiment scores back to the original dataset
df <- df %>%
left_join(sentiment_scores %>% select(id, sentiment_score), by = "id")
View(df)
View(df)
# Install the required package if you don't have it already
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
# Define UI for the Shiny dashboard
ui <- dashboardPage(
# Dashboard Header
dashboardHeader(title = "Shiny Dashboard"),
# Dashboard Sidebar with Menu
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th")),
menuItem("Charts", tabName = "charts", icon = icon("bar-chart")),
menuItem("Settings", tabName = "settings", icon = icon("cogs"))
)
),
# Dashboard Body
dashboardBody(
tabItems(
# Dashboard tab content
tabItem(tabName = "dashboard",
h2("Dashboard Content"),
fluidRow(
box(title = "Box 1", width = 4, status = "primary", solidHeader = TRUE, "Content of Box 1"),
box(title = "Box 2", width = 4, status = "warning", solidHeader = TRUE, "Content of Box 2")
)
),
# Widgets tab content
tabItem(tabName = "widgets",
h2("Widgets Content")
),
# Charts tab content
tabItem(tabName = "charts",
h2("Charts Content")
),
# Settings tab content
tabItem(tabName = "settings",
h2("Settings Content")
)
)
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for the Shiny dashboard
ui <- dashboardPage(
# Dashboard Header
dashboardHeader(title = "Flipkart Mobile App Dataset"),
# Dashboard Sidebar with Menu
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "mobile dataset", icon = icon("th")),
menuItem("Charts", tabName = "Sales", icon = icon("bar-chart")),
menuItem("Settings", tabName = "Prediction", icon = icon("cogs"))
)
),
# Dashboard Body
dashboardBody(
tabItems(
# Dashboard tab content
tabItem(tabName = "dashboard",
h2("Dashboard Content"),
fluidRow(
box(title = "Box 1", width = 4, status = "primary", solidHeader = TRUE, "Content of Box 1"),
box(title = "Box 2", width = 4, status = "warning", solidHeader = TRUE, "Content of Box 2")
)
),
# Widgets tab content
tabItem(tabName = "widgets",
h2("Widgets Content")
),
# Charts tab content
tabItem(tabName = "charts",
h2("Charts Content")
),
# Settings tab content
tabItem(tabName = "settings",
h2("Settings Content")
)
)
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for the Shiny dashboard
ui <- dashboardPage(
# Dashboard Header
dashboardHeader(title = "Flipkart Mobile App"),
# Dashboard Sidebar with Menu
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Sales", tabName = "widgets", icon = icon("th")),
menuItem("Visualization", tabName = "charts", icon = icon("bar-chart")),
menuItem("Settings", tabName = "settings", icon = icon("cogs"))
)
),
# Dashboard Body
dashboardBody(
tabItems(
# Dashboard tab content
tabItem(tabName = "dashboard",
h2("Dashboard Content"),
fluidRow(
box(title = "Box 1", width = 4, status = "primary", solidHeader = TRUE, "Content of Box 1"),
box(title = "Box 2", width = 4, status = "warning", solidHeader = TRUE, "Content of Box 2")
)
),
# Widgets tab content
tabItem(tabName = "widgets",
h2("Widgets Content")
),
# Charts tab content
tabItem(tabName = "charts",
h2("Charts Content")
),
# Settings tab content
tabItem(tabName = "settings",
h2("Settings Content")
)
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
df<- read.csv("Flipkart.cvs")
df<- read.csv("Flipkart.cvs")
df<- read.csv("Flipkart.cvs")
df<- read.csv("Flipkart.cvs")
getwd()
df<- read.csv("/Flipkart.cvs")
df<- read.csv("C://Users//HP//OneDrive//Documents//Flipkart.csv")
df<- read.csv("Flipkart.csv")
head(df)
str(df)
df$Discount <- (df$Original.Price - df$Selling.Price) / df$Original.Price * 100
View(df)
View(df)
# Sort by Original Price for Cheapest and Expensive phones
cheapest_phones <- df[order(df$Original.Price), ][1:8, ]
expensive_phones <- df[order(-df$Original.Price), ][1:8, ]
# Plot histogram for Top 8 Cheapest Phones
par(mfrow = c(1, 2)) # Create a 1x2 plotting grid
# Plot for Cheapest Phones
barplot(cheapest_phones$Original.Price, names.arg = cheapest_phones$Model, col = "green",
main = "Top 8 Cheapest Phones", ylab = "Original Price", las = 2)
# Plot for Expensive Phones
barplot(expensive_phones$Original.Price, names.arg = expensive_phones$Model, col = "red",
main = "Top 8 Expensive Phones", ylab = "Original Price", las = 2)
# Sort by Original Price for Cheapest and Expensive phones
cheapest_phones <- df[order(df$Original.Price), ][1:8, ]
df<- read.csv("Flipkart.cvs")
df<- read.csv("Flipkart.csv")
df<- read.csv("Flipkart.cvs")
df<- read.csv("Flipkart.csv")
# Sort by Original Price for Cheapest and Expensive phones
cheapest_phones <- df[order(df$Original.Price), ][1:8, ]
expensive_phones <- df[order(-df$Original.Price), ][1:8, ]
# Plot histogram for Top 8 Cheapest Phones
par(mfrow = c(1, 2)) # Create a 1x2 plotting grid
# Plot for Cheapest Phones
barplot(cheapest_phones$Original.Price, names.arg = cheapest_phones$Model, col = "green",
main = "Top 8 Cheapest Phones", ylab = "Original Price", las = 2)
# Plot for Expensive Phones
barplot(expensive_phones$Original.Price, names.arg = expensive_phones$Model, col = "red",
main = "Top 8 Expensive Phones", ylab = "Original Price", las = 2)
# Reset plotting layout
par(mfrow = c(1, 1))
runApp('flipkart.R')
install.packages("shinydashboard")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(shiny); runApp('flipkart.R')
install.packages("shinydashboard")
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
# Install necessary libraries
install.packages("shinydashboard")
library(shiny); runApp('flipkart.R')
function (x, df1, df2, ncp, log = FALSE)
df <- df %>%
mutate(Discount_Percentage = ((Original.Price - Selling.Price) / Original.Price) * 100)
# Step 2: Select the top 8 phones with the highest discount percentage
top_discounted_phones <- df %>%
arrange(desc(Discount_Percentage)) %>%
select(Model, Original.Price, Selling.Price, Discount_Percentage) %>%
head(8)
print(top_discounted_phones)
# Step 2: Select the top 8 phones with the highest discount percentage
top_discounted_phones <- df %>%
arrange(desc(Discount_Percentage)) %>%
select(Model, Original.Price, Selling.Price, Discount_Percentage) %>%
head(8)
df <- df %>%
mutate(Discount_Percentage = ((Original.Price - Selling.Price) / Original.Price) * 100)
# Step 2: Select the top 8 phones with the highest discount percentage
top_discounted_phones <- df %>%
arrange(desc(Discount_Percentage)) %>%
select(Model, Original.Price, Selling.Price, Discount_Percentage) %>%
head(8)
print(top_discounted_phones)
output$topDiscountPlot <- renderPlot({
ggplot(top_discounted_phones, aes(x = reorder(Model, -Discount_Percentage), y = Discount_Percentage)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Top 8 Phones with Maximum Discounts",
x = "Phone Model",
y = "Discount Percentage") +
theme_minimal() +
coord_flip()
})
runApp('flipkart.R')
getwd()
setwd('C:/Users/HP/OneDrive/Documents/app')
getwd()
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='munirsiddiqui',
token='916D86D6C6261BBDD125FCFA1BDD1FB6',
secret='BYsjLeH6u0KgqxZC6WoE8J+ixIXcKRkbT6z6cxSX')
library(rsconnect)
rsconnect::deployApp('C:/Users/HP/OneDrive/Documents/app')
library(rsconnect)
rsconnect::deployApp('C:/Users/HP/OneDrive/Documents/app',  appName = "mobile")
